file LOW_Macros.low;
file Logo_Data.td;

file LOW_Multiplication.low;

subroutine Memset $0038
{
	word Destination : HL;
	byte Value : A;
	byte Count : E;
	byte Count_1 : D;

	label Memset_Loop_Local;
	[Destination++] = Value;			# 0038
	Count--;							# 0039
	jump not_zero Memset_Loop_Local;	# 003A - 003B
	Count_1--;							# 003C
	jump not_zero Memset_Loop_Local;	# 003D - 003E
	return;								# 003F
}

macro Alphabet_Tile_Data_Size $02E0;
data Alphabet_Tile_Data $0200;
file Sprite_Test/Alphabet_Tiles.td;

# Stretches from $0100-$02DF

macro Player_Tile_Data_Size $0100;
data Player_Tile_Data_Size $04E0
file Sprite_Test/Player_Tiles.td;

macro Sin_Table_Data_Size $0100;
data Sin_Table_Data $0800
file Sprite_Test/SIN_Table.td;

# Stretches from $03E0-$04DF

macro Init_Test_Graphics $0640;

macro Main $0150;
subroutine Main Main;
{
	label Wait_VBLANK_Loop;
	A = [$FF00 + LCDY_REGISTER];			# 04E0
	A < VBLANK_LY;							# 04E1
	jump not_zero Wait_VBLANK_Loop;			# 04E2 - 04E3

	# We're in VBLANK! We can turn off the LCD and load in data

	call Init_Test_Graphics;				# 04E4 - 04E6

	label Main_Loop_Local;
	jump Main_Loop_Local;					# 04E7 - 04E8
}

macro Title_Tile_Data_Size $0080;
data Title_Tile_Data $0160
file Sprite_Test/Title.td;

macro Brick_Background_Graphics_Size $0040;
data Brick_Background_Graphics_Data $0600
file Sprite_Test/Brick_16_16_Background.td;

subroutine Update_Title_Screen_Window_Midframe $0730
{
	A = $FF;
	[$FF00 + WINDOW_SCROLL_X_REGISTER] = A;

	# pop AF;

	A ^= A;

	[$FF00 + LCD_STATUS_REGISTER] = A; # Stops all HBlank and LYC interrupts

	returni;
}

subroutine Title_Screen_STAT_Interrupt $07B0
{
	A = [$FF00 + LCD_STATUS_REGISTER];					# 0748 - 0749
	A &= $02;											# 074A - 074B

	jump not_zero Update_Title_Screen_Window_Midframe;	# 074C - 004E

	B = $08;											# 074F - 0750
	A = [$FF00 + LCDY_REGISTER];
	A += A;
	A += A;
	A += L;
	C = A;

	A = [BC];											# 0751
	
	swap A;

	A &= $0F;

	# A >>= 1;

	jump not_zero Local_Conditional_Add;

	A++;

	label Local_Conditional_Add;

	[$FF00 + WINDOW_SCROLL_X_REGISTER] = A;				# 0755 - 0756

	returni;											# 0757
}

subroutine STAT_Interrupt $0048
{
	jump Title_Screen_STAT_Interrupt;
}

subroutine Vblank_Procedure $0900
{
	HL++;

	A = L;

	[$FF00 + BACKGROUND_SCROLL_X_REGISTER] = A;

	A >>>= 1;
	A >>>= 1;

	[$FF00 + BACKGROUND_SCROLL_Y_REGISTER] = A;

	A = $07;

	[$FF00 + WINDOW_SCROLL_X_REGISTER] = A;

	A = $10;

	[$FF00 + WINDOW_SCROLL_Y_REGISTER] = A;

	A = $48;

	[$FF00 + LCD_STATUS_REGISTER] = A; # We want LDY interrupt AND HBlank interrupt

	#

	returni;
}

subroutine Vblank_Jump $0040
{
	jump Vblank_Procedure;
}

subroutine Main_Jump $0100
{
	jump Main;
}

subroutine DMA_Function_Instructions $0720
{
	A = $40;		# 2 cycles / 0720-0721
	label DMA_Loop;
	A--;			# 1 cycle  / 0722
	jump not_zero DMA_Loop;	# 3 cycles / 0723-0724
	return;			# 4 cycles / 0725
}

macro DMA_Function $FF80;
subroutine Init_DMA $0700
{
	HL = $0720;
	C = $80;
	D = $06;
	label Load_DMA_Loop;
	A = [HL++];
	[$FF00 + C] = A;
	C++;
	D--;
	jump not_zero Load_DMA_Loop;

	return;
}

data Title_Screen_Important_Tiles $0780
{
	$36 $35 $35 $34 $36 $34 $37 $38 $35 $34 $36 $35 $35

	$36 $35 $34 $34 $36 $34 $34 $36 $34 $34 $36 $35 $34

	$37 $34 $34 $34 $37 $34 $34 $37 $34 $34 $37 $35 $35
}

subroutine Load_Title_Screen_Graphics $0740
{
	HL = $9C00;		# Window tile map
	A = $32;		# The first graphic

	DE = $0120; # The value 32 (this is how long a line of the tilemap is)

	call Memset;

	A = $34;

	DE = $0160;

	call Memset;

	A--;

	DE = $0120;

	call Memset;

	# Finished loading in the background stuff!

	BC = $9C23;
	HL = Title_Screen_Important_Tiles;
	DE = $000D;

	call Memcpy;

	BC = $9C43;
	DE = $000D;
	call Memcpy;

	BC = $9C63;
	DE = $000D;
	call Memcpy;

	return;
}

subroutine Init_Test_Graphics Init_Test_Graphics
{
	A ^= A;
	[$FF00 + LCDC_REGISTER] = A; # This turns off the LCDC and PPU momentarily

	HL = OAM;
	DE = $019A;

	call Memset;

	HL = Alphabet_Tile_Data;
	BC = $9000;
	DE = Alphabet_Tile_Data_Size;

	call Memcpy;						# Loads alphabet in VRAM

	HL = Brick_Background_Graphics_Data;
	DE = Brick_Background_Graphics_Size;

	call Memcpy;						# Loads bricks into VRAM

	# HL = VRAM_TILEM_0;
	# DE = $0400;

	# A = $05;

	# call Memset;						# Clears tile map

	DE = Title_Tile_Data_Size;
	HL = Title_Tile_Data;

	call Memcpy;

	BC = $8320;
	HL = Title_Tile_Data;
	DE = Title_Tile_Data_Size;

	call Memcpy;

	HL = VRAM_TILEM_0;

	A = $2E; # Start of Brick graphic
	B = $02; # Offset

	E = $20;
	label Brick_Graphic_Memcpy;
	C = $02;
	label Brick_Graphic_Odd_Row_Loop;
	D = $10;
	label Brick_Graphic_Row_Loop;
	[HL++] = A;
	A += B;
	[HL++] = A;
	A -= B;
	D--;
	jump not_zero Brick_Graphic_Row_Loop; 
	A++;
	C--;
	jump not_zero Brick_Graphic_Odd_Row_Loop;
	A-=B;
	E--;
	jump not_zero Brick_Graphic_Memcpy;

	call Load_Title_Screen_Graphics;
	# Finished copying the memory!!

	A = $E4;

	[$FF00 + BACKGROUND_PALETTE_REGISTER] = A;
	[$FF00 + OBJECT_PALETTE_0_REGISTER] = A;
	swap A;
	[$FF00 + OBJECT_PALETTE_1_REGISTER] = A;

	A = $03;

	[$FF00 + INTERRUPT_ENABLE_REGISTER] = A;

	call Init_DMA;

	#
	HL = OAM;

	A = $20;
	[HL++] = A;
	A = $08;
	[HL++] = A;
	A = $32;
	[HL++] = A;
	HL++;

	A = $28;
	[HL++] = A;
	A = $08;
	[HL++] = A;
	A = $34;
	[HL++] = A;
	HL++;

	A = $30;
	[HL++] = A;
	A = $08;
	[HL++] = A;
	A = $34;
	[HL++] = A;
	HL++;

	A = $38;
	[HL++] = A;
	A = $08;
	[HL++] = A;
	A = $34;
	[HL++] = A;
	HL++;

	A = $40;
	[HL++] = A;
	A = $08;
	[HL++] = A;
	A = $33;
	[HL++] = A;
	HL++;

	#

	A = $E3;

	[$FF00 + LCDC_REGISTER] = A;	
		# LCD/PPU ON
		# ENABLE BG
		# ENABLE WINDOW
		# GIVE DIFFERENT TILEMAP FOR WINDOW

	A = $37;

	[$FF00 + LYC_REGISTER] = A;

	A = $48;

	[$FF00 + LCD_STATUS_REGISTER] = A;

	#

	HL = $0000;

	returni;
}