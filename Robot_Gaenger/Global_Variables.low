macro Stack_Origin $CFFF;

macro OAM_Buffer $C000;
    # This goes from $C000 - $C09F inclusive

macro LCD_Interrupt_Routine_Flags $C0A0;
# This byte is used to tell the CPU which 
# LCD interrupt routine we should use
    # Title screen interrupt routine

macro VBlank_Interrupt_Routine_Flags $C0A1;
# This byte is used to tell the CPU which
# VBlank interrupt routine we should use

macro Frame_Counter_Register $C0A2;

macro OAM_Buffer_Counter $C0A3;
macro OAM_Buffer_Counter_Start $C0A4;

macro Actor_Buffer $C100;
macro Actor_Buffer_High $C1;
    # byte 0/1: 16-bit Y position
    # byte 2/3: 16-bit X position
    # byte 4 : function table index / state
    # byte 5 : flags
    # byte 6/7: object miscellaneous memory (can be a pointer or HP or anything)

    # The actors in the actor buffer are all 8 bytes long

# 16-bit game positions should be stored like so:
#           S = sign / most significant bit
#           T = tile
#           P = pixel
#           s = subpixel
#                               STTTTTTT PPPsssss
#                               FEDCBA98 76543210
#                               Higher   Lower
# This is such that:
#   HL += HL;   # 2 cycles
#   HL += HL;   # 2 cycles
#   HL += HL;   # 2 cycles
#   A = H;      # 1 cycle
# Gives the result A = TTTTTPPP to the nearest pixel (which is important for graphics)
# This number of subpixels is kinda overkill but I think it's the best method I have

macro Camera_Scroll_X $FFFC; macro Camera_Scroll_X_Low $FFFD;    # FFFC = H, FFFD = L
macro Camera_Scroll_Y $FFFA; macro Camera_Scroll_Y_Low $FFFB;    # FFFA = H, FFFB = L
macro Player_X $FFF8; macro Player_X_Low $FFF9; # FFF8 = H, FFF9 = L
macro Player_Y $FFF6; macro Player_Y_Low $FFF7; # FFF6 = H, FFF7 = L
macro Player_State $FFF5;      # FFF5 is 8 bits for player state
macro Player_X_Vel $FFF4;      # SPPPssss
macro Player_Y_Vel $FFF3;      # SPPPssss
macro Player_Animation_Counter $FFF2;
#               The player can't move faster than 7 pixels per frame with this current setup
macro Player_Direction $FFF1;

# Here's how you add an 8-bit velocity to a 16-bit position:
#   word Position : HL;
#   byte High : D;
#   byte Lower : E;
#   High = $00;            # 2 cycles
#   Lower <<= 1;        # 2 cycles
        # Sets carry flag to S
#   jump not_carry Not_Negative;    # If there's no carry, we can skip this part, 2-3 cycles
#   High--;                            # Sets D to $FF, 1 cycle
#   label Not_Negative;
#   HL += DE;                       # 2 cycles

macro Level_Width $FFF0;        # This is the width of the current level 
                                # (this allows the screen to lock at the sides of the level)

macro Level_WRAM_Data $D000;    # D000 - DFFF inclusive