

file Logo_Data.td;
file LOW_Macros.low;

file Robot_Gaenger/Memory_Copy.low;

macro DMA_OAM_BUFFER $C000;

file Robot_Gaenger/DMA_Handler.low;

file Robot_Gaenger/Screen_Interrupts.low;

# Memory from 0120 onwards is fairly accessable!

macro Alphabet_Tile_Data_Size $02E0;
data Alphabet_Tile_Data $0150
file Robot_Gaenger/Alphabet_Tiles.td;		# $0150 - $042F

macro Title_Tile_Data_Size $0080;
data Title_Tile_Data $0430
file Robot_Gaenger/Title.td;				# $0430 - $04AF

macro Brick_Background_Tile_Data_Size $0020;
data Brick_Background_Tile_Data $04B0
file Robot_Gaenger/Brick_16_16.td;			# $04B0 - $04EF

# Note that this uses grey and black pixels! (02/03) the title screen should use white and light-grey (00/01)

macro Parallax_Brick_Background_Tile_Data_Size $0008;
data Parallax_Brick_Background_Tile_Data $04D0
file Robot_Gaenger/Parallax_Brick_Background.td;	# $04F0 - $04F7

macro Robot_Graphics_Size $0200;
data Robot_Graphics_Data $04F8
file Robot_Gaenger/Robot_Graphics.td;		# $04F8 - $06F7

macro Title_Bot_Letters_Size $0046;
data Title_Bot_Letters_Data $0800
file Robot_Gaenger/Title_BOT_Letters.tm;

# Routine data can begin from 06F8 :D

subroutine Title_Screen_Loop_Routine $0900
{
	label Wait_For_VBlank_Loop;

	A = [$FF00 + LCDY_REGISTER];
	A < $91;
	jump not_zero Wait_For_VBlank_Loop;

	jump Wait_For_VBlank_Loop;
}

subroutine Init_Title_Screen $0730
{
	SP = $CFFF;	# This places the stack where we want it to go

	call Init_HRAM_DMA_Function;

	HL = $C000;
	DE = $00A0;
	B = $00;
	call Memset;				# Clears OAM buffer

	A = $80;
	[$FF00 + LCDC_REGISTER] = A;

	label Wait_For_VBlank_Loop;

	A = [$FF00 + LCDY_REGISTER];
	A < $91;
	jump not_zero Wait_For_VBlank_Loop;

	A ^= A;
	[$FF00 + LCDC_REGISTER] = A;		# Turns off LCD so we can load in new data

	HL = Alphabet_Tile_Data;
	BC = VRAM_BLOCK_1;		# This is location $8800 in VRAM
	DE = Alphabet_Tile_Data_Size;
	call Memcpy;

	HL = Title_Tile_Data;
	DE = Title_Tile_Data_Size;
	call Memcpy;

	HL = Robot_Graphics_Data;
	BC = VRAM_BLOCK_0;
	DE = Robot_Graphics_Size;
	call Memcpy;

	BC = VRAM_BLOCK_2;
		# HL = Brick_Background_Tile_Data;
		# DE = Brick_Background_Tile_Data_Size;
		# call Memcpy;

	HL = Brick_Background_Tile_Data;
	DE = $0028;

	label Load_Parallax_Brick_Background_Loop;
		A = [HL++];
		[BC] = A;
		BC++;
		A ^= A;
		[BC] = A;
		BC++;

		DE--;
		A = D;
		A |= E;
	jump not_zero Load_Parallax_Brick_Background_Loop;

	HL = VRAM_TILEM_1;
	DE = $0020;
	B = $AE;	# Top tile thereof
	call Memset;

	DE = $00A0;
	B = $B0;	# Blank title tile
	call Memset;
	DE = $0020;
	B = $AF;
	call Memset;

	HL = Title_Bot_Letters_Data;
	BC = $9C23;

	D = $05;
	label Local_Memcpy_Title_Bot_Letters;
	push DE;
	DE = $000E;
	call Memcpy;
	A = C;
	A += $12;
	C = A;
	pop DE;
	D--;
	jump not_zero Local_Memcpy_Title_Bot_Letters;

	#

	HL = VRAM_TILEM_0;	# Background layer
	B = $02;
	C = $03;
	D = $20;
	A ^= A;
	label Local_Fill_Background_Tilemap;
	E = $10;
	A &= C;
	label Four_Byte_Pattern;
	[HL++] = A;
	A++;
	[HL++] = A;
	A++;
	A &= C;
	E--;
	jump not_zero Four_Byte_Pattern;
	A += B;
	D--;
	jump not_zero Local_Fill_Background_Tilemap;

	# 

	call Init_Title_Screen_Sprites;

	# Place static title screen sprites in OAM

	# Set all of the palette information

	A = $E4;

	[$FF00 + BACKGROUND_PALETTE_REGISTER] = A;

	[$FF00 + OBJECT_PALETTE_0_REGISTER] = A;

	swap A;

	[$FF00 + OBJECT_PALETTE_1_REGISTER] = A;

	#

	A = $03;

	[$FF00 + INTERRUPT_ENABLE_REGISTER] = A;

	A = $47;

	[$FF00 + LYC_REGISTER] = A;

	#

	A = $E3;

	[$FF00 + LCDC_REGISTER] = A;

	enablei;

	jump Title_Screen_Loop_Routine;
}

subroutine Main_Jump $0100
{
	jump Init_Title_Screen;
}