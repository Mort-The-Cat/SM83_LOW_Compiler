macro placeholder $0000;

file Logo_Data.td; 

file LOW_Macros.low;

file Robot_Gaenger/Memory_Copy.low;

#

macro Alphabet_Tile_Data_Size $02E0;
data Alphabet_Tile_Data $150
file Robot_Gaenger/Alphabet_Tiles.td;

macro Title_Tile_Data_Size $00E0;
data Title_Tile_Data
file Robot_Gaenger/Title.td;

macro Brick_Background_Tile_Data_Size $0020;
data Brick_Background_Tile_Data
file Robot_Gaenger/Brick_16_16.td;

macro Parallax_Brick_Background_Tile_Data_Size $0010;
data Parallax_Brick_Background_Tile_Data
file Robot_Gaenger/Parallax_Brick_Background.td; 

macro Robot_Graphics_Size $02D0;
data Robot_Graphics_Data
file Robot_Gaenger/Robot_Graphics.td;

macro Cloud_Graphics_Size $0090;
data Cloud_Graphics_Data
file Robot_Gaenger/Cloud_Graphics.td;

macro Shaded_Brick_Graphics_Size $00D0;
data Shaded_Brick_Graphics_Data
file Robot_Gaenger/Shaded_Brick.td;

macro Title_Bot_Letters_Size $0046;
data Title_Bot_Letters_Data
file Robot_Gaenger/Title_BOT_Letters.td;

macro Intro_Level_Data_Size $1000;
data Intro_Level_Data
file Robot_Gaenger/Long_Level_Data_RLE.td;

macro Enemy_Graphics_Size $0190;
data Enemy_Graphics_Data
file Robot_Gaenger/Enemy_Graphics_Data.td;

#

file Robot_Gaenger/RLE_Loader.low;

#

file Robot_Gaenger/Global_Variables.low;

subroutine Init_Title_Screen
{
    # Loads everything in

    SP = Stack_Origin;

    A = $80;            # Turns on LCD screen
    [$FF00 + LCDC_REGISTER] = A;

    label Wait_For_VBlank;
    A = [$FF00 + LCDY_REGISTER];
    A < VBLANK_SCANLINE;
    jump not_zero Wait_For_VBlank;

    # The moment VBlank occurs,

    A ^= A;
    [$FF00 + LCDC_REGISTER] = A;    # Clears the LCD control, turning off PPU etc

    # Allows us to write to VRAM!

    HL = Alphabet_Tile_Data;
    BC = VRAM_BLOCK_1;
    DE = Alphabet_Tile_Data_Size;
    call Memcpy;

    HL = Title_Tile_Data;
    DE = Title_Tile_Data_Size;
    call Memcpy;

    HL = Robot_Graphics_Data;
    BC = VRAM_BLOCK_0;
    DE = Robot_Graphics_Size;
    call Memcpy;

    HL = Enemy_Graphics_Data;
    DE = Enemy_Graphics_Size;
    call Memcpy;

    BC = VRAM_BLOCK_2;
		# HL = Brick_Background_Tile_Data;
		# DE = Brick_Background_Tile_Data_Size;
		# call Memcpy;

	HL = Brick_Background_Tile_Data;
	DE = $0030;

	label Load_Parallax_Brick_Background_Loop;
		A = [HL++];
		[BC] = A;
		BC++;
		A ^= A;
		[BC] = A;
		BC++;

		DE--;
		A = D;
		A |= E;
	jump not_zero Load_Parallax_Brick_Background_Loop;

	HL = $81C0;
	DE = $0040;
	call Memcpy;	# This copies the Robot_Graphics bricks into the 2nd VRAM Block

	HL = Cloud_Graphics_Data;
	DE = Cloud_Graphics_Size;
	call Memcpy;

    HL = Shaded_Brick_Graphics_Data;
	DE = Shaded_Brick_Graphics_Size;
	call Memcpy;

    # Starts writing the title graphics to the tilemap

	HL = VRAM_TILEM_1;
	DE = $0020;
	B = $AE;	# Top tile thereof
	call Memset;

	DE = $00A0;
	B = $B0;	# Blank title tile
	call Memset;
	DE = $0020;
	B = $AF;
	call Memset;

	HL = Title_Bot_Letters_Data;
	BC = $9C23;

	D = $05;
	label Local_Memcpy_Title_Bot_Letters;
	    push DE;
	    DE = $000E;
	    call Memcpy;
	    A = C;
	    A += $12;
	    C = A;
	    pop DE;
	    D--;
	jump not_zero Local_Memcpy_Title_Bot_Letters;

	#

	HL = VRAM_TILEM_0;	# Background layer
	B = $02;
	C = $03;
	D = $20;
	A ^= A;
	label Local_Fill_Background_Tilemap;
	    E = $10;
	    A &= C;
	    label Four_Byte_Pattern;
	        [HL++] = A;
	        A++;
	        [HL++] = A;
	        A++;
	        A &= C;
	        E--;
	    jump not_zero Four_Byte_Pattern;
	    A += B;
	    D--;
	jump not_zero Local_Fill_Background_Tilemap;

    

    label Test_Loop;
    jump Test_Loop;
}

subroutine Main_Byte $0100
{
    jump Init_Title_Screen;
}

