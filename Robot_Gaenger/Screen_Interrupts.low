macro LCD_Interrupt_Routine_Flags $C0A0;
# This byte is used to tell the CPU which 
# LCD interrupt routine we should use

macro VBlank_Interrupt_Routine_Flags $C0A1;
# This byte is used to tell the CPU which
# VBlank interrupt routine we should use

macro Frame_Counter_Register $C0A2;

macro OAM_Buffer_Counter $C0A3;
macro OAM_Buffer_Counter_Start $C0A5;		# This indicates the start of the nonstatic OAM buffer.
											# If there aren't any static objects onscreen, this can be set to zero

macro Global_Animation_Counter $FFFE;		# This is used for things like the title screen

subroutine Window_Hide_LCD_Routine $0720
{
	A = $FF;								# 0710 - 0711
	[$FF00 + WINDOW_SCROLL_X_REGISTER] = A;	# 0712 - 0713

	A ^= A;									# 0714

	[$FF00 + LCD_STATUS_REGISTER] = A;		# 0715 - 0716

	pop AF;
	pop HL;									# 0717

	returni;								# 0718
}

subroutine Title_Screen_Simple_LCD_Interrupt_Routine $1200
{
	push AF;
	A = [$FF00 + LCDY_REGISTER];
	H = A;
	A = [$FF00 + WINDOW_SCROLL_Y_REGISTER];
	A += $37;
	A < H;

	jump zero Window_Hide_LCD_Routine;

	A = $06;
	[$FF00 + WINDOW_SCROLL_X_REGISTER] = A;
	
	pop AF;
	pop HL;
	returni;
}

subroutine Title_Screen_LCD_Interrupt_Routine $06FA
{
	push AF;
	A = [$FF00 + LCD_STATUS_REGISTER];		
	A &= $02;								
	jump not_zero Window_Hide_LCD_Routine;	

	HL = Frame_Counter_Register;

	A = [$FF00 + LCDY_REGISTER];
	A += [HL];
	swap A;
	A <<>= 1;
	A &= $0F;
	
	jump not_zero Local_Conditional_Add;	

	A++;		

	label Local_Conditional_Add;

	call Triangle_Wave;

	# A &= $0F;

	A += $02;

	[$FF00 + WINDOW_SCROLL_X_REGISTER] = A;	

	pop AF;
	pop HL;									
	returni;							
}

subroutine LCD_Jump $0048
{
	push HL;
	HL = LCD_Interrupt_Routine_Flags;
	[HL].0;
	jump zero Title_Screen_LCD_Interrupt_Routine;
	jump Title_Screen_Simple_LCD_Interrupt_Routine;
}

subroutine Init_Title_Screen_Sprites $0990
{
	HL = OAM_Buffer_Counter;
	A ^= A;
	[HL] = A;

	BC = $1008;	# Y and X position
	push BC;
	BC = Title_Text_Left_Pad_Graphics_Size;	# Sprite flags and number of sprites
	push BC;
	DE = Title_Text_Left_Pad;
	call Place_Sprites_In_OAM;

	BC = $6030;
	push BC;
	BC = $100A;
	push BC;
	DE = Press_Start;
	call Place_Sprites_In_OAM;

	return;
}

subroutine Title_Screen_VBlank_Routine $0930
{
	# We want all of the title screen logic to occur during VBlank
	# this is because while the PPU is drawing, the HBlank routines
	# are fairly demanding

	push DE;

	A = $48;
	
	[$FF00 + LCD_STATUS_REGISTER] = A;

	A = $07;
	[$FF00 + WINDOW_SCROLL_X_REGISTER] = A;

	HL = Frame_Counter_Register;
	[HL]++;

	A = [HL];

	L = A;

	A >>>= 1;

	[$FF00 + BACKGROUND_SCROLL_X_REGISTER] = A;

	A >>>= 1;
	A >>>= 1;

	[$FF00 + BACKGROUND_SCROLL_Y_REGISTER] = A;

	H = $90;

	A = [OAM_Buffer_Counter_Start];
	[OAM_Buffer_Counter] = A;			# Resets OAM buffer counter

		
	push BC;	# Just saving this for later

	push HL;	# Y and X values

	H = $00;
	L = $04;
	push HL;	# Sprite flags and length
	DE = Robot_Steh;
	call Place_Meta_Sprite_In_OAM;


	
	call Clean_OAM_Buffer;
	call DMA_Transfer;
	pop BC;
	pop DE;
	pop HL;

	returni;
}

subroutine VBlank_Handler $0860
{
	push HL;							# 0000
	HL = VBlank_Interrupt_Routine_Flags;# 0001 - 0003
	[HL].0;								# 0004 - 0005
	# jump 

	jump not_zero Title_Screen_VBlank_Routine;	# 0006 - 0008

	jump Title_Screen_VBlank_Routine;	# This is a placeholder, we'll use a different function once we're on a different screen.

	returni;							# 0009
}

subroutine VBlank_Jump $0040
{
	jump VBlank_Handler;
}